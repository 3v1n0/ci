name: Release to Candidate
description: Builds a snap using `snapcraft remote-build` and releases it to candidate
author: Snapcrafters
branding:
  icon: tag
  color: orange

inputs:
  architecture:
    description: "The architecture to build the snap for"
    default: amd64
    required: false
  channel:
    description: "The channel to publish the snap to"
    default: "candidate"
    required: false
  launchpad-token:
    description: "A token with permissions to create remote builds on Launchpad"
    required: true
  store-token:
    description: "A token with permissions to upload to the specified channel"
    required: true
  snapcraft-yaml-path:
    description: "Custom path to snapcraft.yaml for when it is not in the default location."
    required: false


outputs:
  revision:
    description: "The revision of the uploaded snap"
    value: ${{ steps.publish.outputs.revision }}

runs:
  using: composite
  steps:
    - name: Checkout the source
      uses: actions/checkout@v4

    - name: Setup snapcraft
      shell: bash
      run: |
        sudo snap install snapcraft --classic

        # Setup Launchpad credentials
        mkdir -p ~/.local/share/snapcraft/provider/launchpad
        echo "${{ inputs.launchpad-token }}" > ~/.local/share/snapcraft/provider/launchpad/credentials
        git config --global user.email "github-actions@github.com"
        git config --global user.name "Github Actions"

    - name: Find the snapcraft.yaml path
      id: yaml-path
      shell: bash
      run : |
        if [[ -n "${{ inputs.snapcraft-yaml-path }}"; then
          yaml_path="${{ inputs.snapcraft-yaml-path }}"
        else
          snapcraft_yaml_paths=(
            "snap/snapcraft.yaml"
            "snapcraft.yaml"
            "build-aux/snap/snapcraft.yaml"
            ".snapcraft.yaml"
          )
          
          for file in "${snapcraft_yaml_paths[@]}"; do
              if [[ -f "$file" ]]; then
                  yaml_path="$file"
              fi
          done
        fi
        if [[ ! -n "${yaml_path}" ]]; then
           echo "No snapcraft.yaml found" >2
           exit 1
        fi
        echo "yaml-path=${yaml_path}" >> "$GITHUB_OUTPUT"
        echo "snap-name=$(yq -r '.name' "$yaml_path")" >> "$GITHUB_OUTPUT"


    - name: Build the snap (${{ inputs.architecture }})
      id: build
      shell: bash
      env:
        yaml_path: ${{ steps.yaml-path.outputs.yaml-path }}
        name: ${{ steps.yaml-path.outputs.snap-name }}
        arch: ${{ inputs.architecture }}
      run : |
        # Remove the architecture definition from the snapcraft.yaml due to:
        # https://bugs.launchpad.net/snapcraft/+bug/1885150
        yq -i 'del(.architectures)' "$yaml_path"

        snapcraft remote-build --launchpad-accept-public-upload --build-for="${arch}"

        version="$(yq -r '.version' "$yaml_path")"
        if [[ ! -e "${name}_${version}_${arch}.snap" ]]; then
            echo "Could not find ${name}_${version}_${arch}.snap"
            cat "${name}_${arch}.txt"
            exit 1
        else
            cat "${name}_${arch}.txt"
        fi
        echo "snap=${name}_${version}_${arch}.snap" >> "$GITHUB_OUTPUT"

        # Write the manifest file which is used by later steps
        echo "name: ${name}" >> "manifest-${arch}.yaml"
        echo "architecture: ${arch}" >> "manifest-${arch}.yaml"

    - name: Parse snap review information
      id: parse
      shell: bash
      env:
        yaml_path: ${{ steps.yaml-path.outputs.yaml-path }}
      run : |
        # Populate defaults
        echo "classic=false" >> "$GITHUB_OUTPUT"

        # Check for classic confinement and update the output if the snap is classic
        if [[ "$(yq -r '.confinement' "$yaml_path")" == "classic" ]]; then
          echo "classic=true" >> "$GITHUB_OUTPUT"
        fi

        # Declare the common locations for plugs/slots declarations
        plugs_files=("plug-declaration.json" ".github/plug-declaration.json")
        slots_files=("slot-declaration.json" ".github/slot-declaration.json")
        
        for file in "${plugs_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "plugs=$file" >> "$GITHUB_OUTPUT"
          fi
        done

        for file in "${slots_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "slots=$file" >> "$GITHUB_OUTPUT"
          fi
        done

    - name: Review the built snap
      uses: diddlesnaps/snapcraft-review-action@v1
      with:
        snap: ${{ steps.build.outputs.snap }}
        isClassic: ${{ steps.parse.outputs.classic }}
        plugs: ${{ steps.parse.outputs.plugs }}
        slots: ${{ steps.parse.outputs.slots }}

    - name: Release the built snap to latest/${{ inputs.channel }}
      id: publish
      shell: bash
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ inputs.store-token }}
        SNAP_FILE: ${{ steps.build.outputs.snap }}
      run: |
        snapcraft_out="$(snapcraft push "$SNAP_FILE" --release="${{ inputs.channel }}")"
        revision="$(echo "$snapcraft_out" | grep -Po "Revision \K[^ ]+")"
        echo "revision=${revision}" >> "$GITHUB_OUTPUT"
        echo "revision: ${revision}" >> "manifest-${{ inputs.architecture }}.yaml"

    # Upload the manifest file as an artifact for retrieval during future actions
    - name: Upload revision manifest
      uses: actions/upload-artifact@v3.1.3
      with:
        name: "manifests"
        path: "manifest-${{ inputs.architecture }}.yaml"
